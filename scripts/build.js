#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const archiver = require('archiver');

async function createDistribution() {
  console.log('üì¶ Creando distribuci√≥n de Carnivalito Pro Elite 3.0...\n');

  // Crear directorio de distribuci√≥n
  const distDir = './dist';
  if (!fs.existsSync(distDir)) {
    fs.mkdirSync(distDir, { recursive: true });
  }

  // Crear archivo ZIP
  const output = fs.createWriteStream(path.join(distDir, 'carnivalito-pro-elite-v3.0.zip'));
  const archive = archiver('zip', { zlib: { level: 9 } });

  return new Promise((resolve, reject) => {
    output.on('close', () => {
      console.log(`‚úÖ Distribuci√≥n creada: ${archive.pointer()} bytes`);
      console.log('üìÅ Archivo: ./dist/carnivalito-pro-elite-v3.0.zip\n');
      
      console.log('üéâ ========================================');
      console.log('   CARNIVALITO PRO ELITE 3.0 LISTO');
      console.log('========================================');
      console.log(`
üìã Contenido del paquete:
   ‚Ä¢ Servidor Node.js completo
   ‚Ä¢ Frontend moderno y responsivo
   ‚Ä¢ Sistema de IA con m√∫ltiples modelos
   ‚Ä¢ S√≠ntesis de voz avanzada
   ‚Ä¢ An√°lisis po√©tico carnavalero
   ‚Ä¢ Sistema de aprendizaje adaptativo
   ‚Ä¢ Panel de administraci√≥n
   ‚Ä¢ Base de datos SQLite
   ‚Ä¢ Cifrado de APIs con rotaci√≥n
   ‚Ä¢ WebSockets para tiempo real

üöÄ Instalaci√≥n:
   1. Extraer el ZIP
   2. cd carnivalito-pro-elite
   3. npm install
   4. npm run setup
   5. npm run dev

üåê Acceso:
   ‚Ä¢ Chat: http://localhost:3000
   ‚Ä¢ Admin: http://localhost:3000/admin

üé≠ ¬°Que viva el Carnaval de C√°diz!
      `);
      resolve();
    });

    archive.on('error', reject);
    archive.pipe(output);

    // A√±adir archivos al ZIP
    archive.file('package.json', { name: 'carnivalito-pro-elite/package.json' });
    archive.file('.env.example', { name: 'carnivalito-pro-elite/.env.example' });
    archive.directory('server/', 'carnivalito-pro-elite/server/');
    archive.directory('public/', 'carnivalito-pro-elite/public/');
    archive.directory('scripts/', 'carnivalito-pro-elite/scripts/');
    
    // Crear directorios vac√≠os necesarios
    archive.append('', { name: 'carnivalito-pro-elite/data/.gitkeep' });
    archive.append('', { name: 'carnivalito-pro-elite/logs/.gitkeep' });
    archive.append('', { name: 'carnivalito-pro-elite/backups/.gitkeep' });
    
    archive.finalize();
  });
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  createDistribution().catch(console.error);
}

module.exports = createDistribution;
